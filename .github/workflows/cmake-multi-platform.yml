# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libboost-system-dev \
          libboost-date-time-dev \
          libcurl4-openssl-dev \
          libssl-dev \
          libmongoc-1.0-0 \
          libmongoc-dev \
          libbson-1.0-0 \
          libbson-dev
        
        # Install MongoDB C++ driver
        wget https://github.com/mongodb/mongo-cxx-driver/releases/download/r3.10.2/mongo-cxx-driver-r3.10.2.tar.gz
        tar -xzf mongo-cxx-driver-r3.10.2.tar.gz
        cd mongo-cxx-driver-r3.10.2
        mkdir -p build
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_CXX_STANDARD=17 \
          -DBSONCXX_POLY_USE_STD_EXPERIMENTAL=OFF \
          -DBSONCXX_POLY_USE_STD=ON \
          -DBSONCXX_POLY_USE_MNMLSTC=OFF \
          -DBSONCXX_POLY_USE_BOOST=OFF
        sudo cmake --build . --target install -- -j$(nproc)
        cd ../..
        
        # Verify installation with detailed checks
        echo "=== MongoDB C++ Driver Installation Verification ==="
        echo "Checking for mongocxx/client.hpp:"
        find /usr/local -name "client.hpp" 2>/dev/null || echo "client.hpp not found"
        echo "Checking include directories:"
        ls -la /usr/local/include/ | grep mongo || echo "No mongo directories found"
        if [ -d "/usr/local/include/mongocxx" ]; then
          echo "mongocxx directory contents:"
          find /usr/local/include/mongocxx -name "*.hpp" | head -10
        fi
        echo "Checking library files:"
        ls -la /usr/local/lib/libmongocxx* 2>/dev/null || echo "No mongocxx libraries found"
        echo "Checking cmake config files:"
        find /usr/local/lib/cmake -name "*mongo*" 2>/dev/null || echo "No mongo cmake files found"
        
        # Create compatibility headers for MongoDB C++ driver
        echo "Creating compatibility headers..."
        mkdir -p /usr/local/include/mongocxx /usr/local/include/bsoncxx
        echo '#ifndef MONGOCXX_CLIENT_HPP' > /usr/local/include/mongocxx/client.hpp
        echo '#define MONGOCXX_CLIENT_HPP' >> /usr/local/include/mongocxx/client.hpp
        echo '#include <mongocxx/v_noabi/mongocxx/client.hpp>' >> /usr/local/include/mongocxx/client.hpp
        echo '#endif' >> /usr/local/include/mongocxx/client.hpp
        
        echo '#ifndef MONGOCXX_INSTANCE_HPP' > /usr/local/include/mongocxx/instance.hpp
        echo '#define MONGOCXX_INSTANCE_HPP' >> /usr/local/include/mongocxx/instance.hpp
        echo '#include <mongocxx/v_noabi/mongocxx/instance.hpp>' >> /usr/local/include/mongocxx/instance.hpp
        echo '#endif' >> /usr/local/include/mongocxx/instance.hpp
        
        echo '#ifndef MONGOCXX_URI_HPP' > /usr/local/include/mongocxx/uri.hpp
        echo '#define MONGOCXX_URI_HPP' >> /usr/local/include/mongocxx/uri.hpp
        echo '#include <mongocxx/v_noabi/mongocxx/uri.hpp>' >> /usr/local/include/mongocxx/uri.hpp
        echo '#endif' >> /usr/local/include/mongocxx/uri.hpp
        
        echo '#ifndef BSONCXX_DOCUMENT_HPP' > /usr/local/include/bsoncxx/document.hpp
        echo '#define BSONCXX_DOCUMENT_HPP' >> /usr/local/include/bsoncxx/document.hpp
        echo '#include <bsoncxx/v_noabi/bsoncxx/document.hpp>' >> /usr/local/include/bsoncxx/document.hpp
        echo '#endif' >> /usr/local/include/bsoncxx/document.hpp
        
        echo "Verifying compatibility headers:"
        ls -la /usr/local/include/mongocxx/ || echo "mongocxx headers not found"
        ls -la /usr/local/include/bsoncxx/ || echo "bsoncxx headers not found"
        
        rm -rf mongo-cxx-driver-r3.10.2*

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install boost-msvc-14.3 -y
        
        # Install vcpkg and required dependencies for Azure SDK and MongoDB
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        .\bootstrap-vcpkg.bat
        .\vcpkg.exe install wil:x64-windows curl:x64-windows openssl:x64-windows mongo-c-driver:x64-windows mongo-cxx-driver:x64-windows
        .\vcpkg.exe integrate install
        echo "VCPKG_ROOT=$env:GITHUB_WORKSPACE\vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -S ${{ github.workspace }}

    - name: Configure CMake (Linux/macOS)
      if: runner.os != 'Windows'
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
